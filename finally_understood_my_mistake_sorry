import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy import stats
import random
import csv

#Read the csv file
Google=pd.read_csv('googleplaystore.csv')

#observe the first three entries
df=Google.head(3)

#store in it the path of the csv file that contains google dataset
#don't understand this one

#Read the csv file
Apple =pd.read_csv("AppleStore.csv") 

# Observe the first three entries
Apple.head(3)

#Subset our DataFrame object Google variables ['Category', 'Rating', 'Reviews', 'Price']
Google=Google[['Category', 'Rating', 'Reviews', 'Price']]
Google.head(3)

#select variables ['prime_genre', 'user_rating', 'rating_count_tot', 'price']
apple=Apple[['prime_genre', 'user_rating', 'rating_count_tot', 'price']]
#i didn't get what the problem here is

#check the first three entries
Apple.head(3)

# check out the data types within our Apple dataframe
print(Apple.dtypes)

#check out the data types of our Google
print(Google.dtypes)
#Google['Category', 'Rating', 'Reviews', 'Price'].dtypes

#Check again the unique values of Google
Google['Price'].unique()

#pick out just those rows whose value for the 'Price' column is NOT 'Everyone'
Google=Google[Google['Price']!='Everyone']
#Check again the unique values of Google
Google['Price'].unique()

#check the data types for our Google dataframe again
print(Google.dtypes)

#find '$' and replace it with nothing
nosymb=Google['Price'].str.replace('$','')
print(nosymb)

#Convert the 'Reviews' column to a numeric data type
Google['Price']=pd.to_numeric(nosymb)

#check the data types of Google
#print(Google.dtypes)
#print(Apple)
# Create a column called 'platform' in both the Apple and Google dataframes
Apple['platform']='apple'
Google['platform']='google'

#store the column names of the Apple dataframe and replace
old_names=Apple.columns
new_names=['A','B','C','D','E']
Apple.rename(columns=dict(zip(old_names, new_names)), inplace=True)

#append Apple to Google
df=Google.append(Apple, ignore_index = True) 

#check 12 random points of your dataset
df.sample(12)

#first the dimesions of df before droping
print(df.shape)

#eliminate all the NaN values
df.dropna()
#df.dropna(axis=columns)
#df.dropna(tresh=2)

#Check the new dimesions of our dataframe
print(df.size)

# Do a count() on the result. 
df=df[df['Reviews']!=0].count()

# Eliminate the points that have 0 reviews
df=[df['Reviews']!=0]

#To summarize analytically, let's use the groupby() method on our df.
#df.groupby('platform','Rating').describe()

# Call the boxplot() method on our df.
#df.boxplot(by='platform', columns =['Rating'], grid=False, rot=45, fontsize=15)

#PART3
# Call the subsets 'apple' and 'google'
apple = df[df['platform'] == 'apple']['Rating']
google = df[df['platform']== 'google']['Rating']

#get an indication of whether the apple data are normally distributed
#the data are normally distributed, the lower the p-value in the result of this test, the more likely the data are to be non-normal.
# Save the result in a variable
apple_normal = stats.normaltest(Apple)
print(apple_normal)

# Create a histogram of the apple reviews distribution
histoApple=plt.hist(Apple)

# Create a histogram of the google data
histoGoogle=plt.hist(Google)

#Create a column called `Permutation1`, and assign to it the result of permuting (shuffling) the Rating column
df.groupby(by='platform')['Permutation1'].describe()

# Lets compare with the previous analytical summary
df.groupby(by='platform')['Rating'].describe()
#what else shpuld i do?

#make a list called difference
difference=list()

# make a for loop that does the following 10,000 times:
# 1. makes a permutation of the 'Rating'
df.groupby(by='platform')['Permutation1'].describe()
# 2. calculates the difference in the mean rating for apple and the mean rating for google.
difference.append(np.mean(permutation[df['platform']=='apple']) - np.mean(permutation[df['platform']=='google']))

for i in range(1000):
    permutation = np.random.permutation(df[groupby(by='platform')['Permutation1'].describe()])
    difference.append(np.mean(permutation[df['platform']=='apple']) - np.mean(permutation[df['platform']=='google']))
    
# Make a variable called 'histo', and assign to it the result of plotting a histogram of the difference list. 
histo = plt.hist(difference)

#make a variable called obs_difference, and assign it the result of the mean of our 'apple' variable and the mean of our 'google' variable
obs_difference = np.mean(apple)-np.mean(google)

# Make this difference absolute with the built-in abs() function
obs_difference =abs(obs_difference)

# Print out this value; it should be 0.1420605474512291. 
print("obs_difference="+obs_difference)

#STAGE4
positiveExtremes = []
negativeExtremes = []
for i in range(len(difference)):
    if (difference[i] >= obs_difference):
        positiveExtremes.append(difference[i])
    elif (difference[i] <= -obs_difference):
        negativeExtremes.append(difference[i])

print(len(positiveExtremes))
print(len(negativeExtremes))
